

a 19
T and E means any type
the T is the data it could send,
the E is an error

enum Result<T, E> {
    Ok(T),
    Err(E)
}




rustup doc brings you to cust documentation





a comment with 3 '/' is for documentation
after addnig this and using
"cargo doc --open"
this will create the actual documentation




enum Option<T> {
    Some(T),
    None
}


Enums can contain data

enum Mouse {
    LeftClick,
    RightClick,
    MiddleClick,
    Scroll(i32),
    Move(i32, i32)
}






Derive is specifically for enums and structs in order to create functionality

derive debug is for printing
derive clone and copy means whenever that object is moved into another structure it will automatically make a copy of it
    - this is a bad idea for large structs











Structs

a data type that contains multiple pieces of data
a struct is all or nothing... either all of the data pieces have data or none of them do

struct ShippingBok {
    depth: i32,
    width: i32,
    height: 132,
}

let my_box = ShippingBox{
    depth: 3,
    width: 2,
    heigth: 5,
}









































Enums (working with data in a typesafe manner)

enum Direction {
    Up,
    Down,
    Left,
    Right
}


fn main () {
    let bool = true;
    match some_bool {
        true => println!("true"),
        false => println!("false"),
    }
}



Data Types

There are a bunch of different integer types:
    I8: -128...127
    u8: 0...255
    i16... -> i128, u128

    isize and usize are depending on the arcitecture of the computer... 
    if it is an x32 computer, then it will be i32, u32, and the same for x64



Variables

    by default variables are immutable, but con be changed to mutable



 For instance

let two = 2;
let mut my_name = "Bill";


functions / println

fn main() {
    println!("Hello, World!");

the exclamation point after "println" indicates that we are using a macro intead of a function

let life = 42;

println!("{:?}", life)
println!("{life:?}")
the :? is for debugging, the normal one below is for user display
println!("{life}")


let mut a = 0;
loop {
    if a == 5 {
        break;
    }
    println!("{:?}, a");
    a = a + 1;
}

while a != 5 {
    println!("{:?}", a);
    a = a + 1;
}